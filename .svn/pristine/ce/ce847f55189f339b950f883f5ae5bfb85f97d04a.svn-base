package com.ztesoft.mobile.v2.controller.building;

import com.ztesoft.eoms.exception.DataAccessException;
import com.ztesoft.mobile.common.helper.StringUtil;
import com.ztesoft.mobile.v2.controller.common.Hdf;
import com.ztesoft.mobile.v2.controller.common.WebConfigController;
import com.ztesoft.mobile.v2.core.Result;
import com.ztesoft.mobile.v2.dao.app.MobileDataInstallDAOImpl;
import com.ztesoft.mobile.v2.service.common.CommonService;
import net.sf.json.JSONObject;
import oracle.jdbc.OracleTypes;
import org.apache.commons.lang.StringUtils;
import org.apache.shiro.crypto.hash.Hash;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.CallableStatementCallback;
import org.springframework.jdbc.core.CallableStatementCreator;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

/**
 * @Description: TODO APP¥�����
 * @author: lck
 * @date: 2021��03��01�� 15:07
 */


@Controller("builDingController")
@RequestMapping("/builDing")
public class BuilDingController extends WebConfigController {

    private CommonService commonService;

    private CommonService getCommonService() {
        return commonService;
    }




    @Autowired(required = false)
    public void setCommonService(CommonService commonService) {
        this.commonService = commonService;
    }




    /**
     * ¥�������Ϣ
     *
     * @param data     ¥��id
     * @param request
     * @param response
     * @return ¥����Ϣ
     * @throws Exception
     */
    @RequestMapping(value = "/client/builDingInfo")
    @ResponseBody
    public Object builDingInfo(@RequestBody Map<String, Object> data,
                               HttpServletRequest request, HttpServletResponse response) throws Exception {

        String search = (String) data.get("search");

        String buildingId =(String) data.get("staffId");


        String sql1 = "SELECT ua.area_id as area_id,decode(ua.area_name,'����','����','����','������',ua.area_name) as area_name,ua.grade as grade FROM uos_staff t  " +
                "left join uos_job_staff ujs on ujs.staff_id = t.staff_id " +
                "left join uos_job uj on uj.job_id = ujs.job_id " +
                "left join uos_org uo on uo.org_id = uj.org_id " +
                "left join uos_area ua on ua.area_id = uo.area_id " +
                "where t.state = '1' " +
                "and ujs.state = '1' " +
                "and uj.state = '1' " +
                "and uo.state = '1' " +
                "and ua.state = '10A' " +

                "and ua.grade in('C2','C3') " +
                "and ujs.is_normal='1' "+
                "and t.staff_id = ? ";

        Map paramMap1 = new HashMap();



        paramMap1.put("staffId", buildingId);
        String	wherePatternStr12 = "staff_id:staffId";
        Result dataList12 = getCommonService().commonQueryListBySql(sql1, paramMap1, wherePatternStr12);
        List data12 = (List)((Map)dataList12.getResultData().get("data_info")).get("dataList");

        PageResult pageResult = new PageResult();
        Pager pager = new Pager();
        int page = pager.getPage();
        Map pageParams = data;

        int recPerPage = pager.getRecPerPage();
        if(pageParams.get("page")!=null){
            page = (Integer) pageParams.get("page");
        }
        if(pageParams.get("recPerPage")!=null){
            recPerPage = (Integer)pageParams.get("recPerPage");
        }
        int startIndex =(page-1)*recPerPage+1; //��ʼ�±�
        int endIndex = page*recPerPage; //�����±�

        if(data12.size()>0){
            String cType = "";
            String cArea = "";
           for(int i = 0;i<data12.size();i++){
               String grade = (String)((Map)(data12.get(i))).get("grade");
               cType += grade+",";
               cArea +=   (String)((Map)(data12.get(i))).get("area_name")+",";

           }
           if(cType.length()>0){
               cType = cType.substring(0,cType.length()-1);

           }

           if(cArea.length()>0){
               cArea = cArea.substring(0,cArea.length()-1);

            }


            if(cType.contains("C2")){
                cType = "C2";
            }else if(cType.contains("C3")){
                cType = "C3";
            }
            else if(cType.contains("C4")){
                cType = "C4";
            }

           if(cType.equals("C2")){
               String sql12Count = "select count(1) as total from SPC_BUILDING a  ";
               if(StringUtils.isNotBlank(search)){
                   sql12Count+=(" and build_name like '%"+search+"%'");
               }

               StringBuilder sb = new StringBuilder();
               sb.append("select build_id,build_code,build_name,region,ADDR6,rownm " );
               sb.append("from (select a.build_id,a.build_code,a.build_name,a.region,a.ADDR6,rownum as rownm " );
               sb.append(" from SPC_BUILDING a ");
               if(StringUtils.isNotBlank(search)){
                   sb.append("where build_name like '%"+search+"%'");
               }
               sb.append(") t ");
               sb.append("where  rownm>=? and rownm<=?");
               Map paramMap = new HashMap();
               paramMap.put("startIndex", startIndex);
               paramMap.put("endIndex", endIndex);
               String	wherePatternStr = "startIndex:startIndex,endIndex:endIndex";
               Result dataList = getCommonService().commonQueryListBySql(sb.toString(), paramMap, wherePatternStr);

               List data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

               //�ܼ�¼��
               Map<String, Object> paramMap_obd = new LinkedHashMap<String, Object>();
               String wherePatternStr_obd = "";

               int total = getCommonService().commonQueryTotalBySql( sql12Count,paramMap_obd, wherePatternStr_obd);
               pager.setPage(page);
               pager.setRecPerPage(recPerPage);
               pager.setRecTotal(total);
               pageResult.setPager(pager);
               pageResult.setData(data1);
               String jsonStr = JSONObject.fromObject(pageResult).toString();
               return jsonStr;
           }

            if(cType.equals("C3")){

                String sql13Count = "select count(1) as total from SPC_BUILDING a where  region in ('"+cArea+"')";
                if(StringUtils.isNotBlank(search)){
                    sql13Count+=(" and build_name like '%"+search+"%'");
                }
                StringBuilder sb = new StringBuilder();
                sb.append("select build_id,build_code,build_name,region,ADDR6,rownm " );
                sb.append("from (select a.build_id,a.build_code,a.build_name,a.region,a.ADDR6,rownum as rownm " );
                sb.append(" from SPC_BUILDING a ");
                sb.append(" where  region in ('"+cArea+"') " );
                if(StringUtils.isNotBlank(search)){
                    sb.append("and build_name like '%"+search+"%'");
                }
                sb.append(") t ");
                sb.append("where  rownm>=? and rownm<=?");
                Map paramMap = new HashMap();
                paramMap.put("startIndex", startIndex);
                paramMap.put("endIndex", endIndex);
                String	wherePatternStr = "startIndex:startIndex,endIndex:endIndex";
                Result dataList = getCommonService().commonQueryListBySql(sb.toString(), paramMap, wherePatternStr);

                List data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

                //�ܼ�¼��
                Map<String, Object> paramMap_obd = new LinkedHashMap<String, Object>();
                String wherePatternStr_obd = "";

                int total = getCommonService().commonQueryTotalBySql( sql13Count,paramMap_obd, wherePatternStr_obd);
                pager.setPage(page);
                pager.setRecPerPage(recPerPage);
                pager.setRecTotal(total);
                pageResult.setPager(pager);
                pageResult.setData(data1);
                String jsonStr = JSONObject.fromObject(pageResult).toString();
                return jsonStr;
            }
        }




        List data1 = null;
        StringBuilder sb_total = new StringBuilder();
        sb_total.append("select count(1) as total from SPC_BUILDING a  where staff_id = ? ");
        if(StringUtils.isNotBlank(search)){
            sb_total.append("and build_name like '%"+search+"%'");
        }

        StringBuilder sb = new StringBuilder();
        sb.append("select build_id,build_code,build_name,region,ADDR6,rownm " );
        sb.append("from (select a.build_id,a.build_code,a.build_name,a.region,a.ADDR6,rownum as rownm " );
        sb.append(" from SPC_BUILDING a ");
        sb.append(" where a.staff_id = ?   " );
        if(StringUtils.isNotBlank(search)){
            sb.append("and build_name like '%"+search+"%'");
        }
        sb.append(") t ");
        sb.append("where  rownm>=? and rownm<=?");

        String sql = sb.toString();
        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();


        paramMap.put("staffId", buildingId);
        paramMap.put("startIndex", startIndex);
        paramMap.put("endIndex", endIndex);
        String	wherePatternStr = "staff_id:staffId,startIndex:startIndex,endIndex:endIndex";
        Result dataList = getCommonService().commonQueryListBySql(sql, paramMap, wherePatternStr);

        data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

        //�ܼ�¼��
        Map<String, Object> paramMap_obd = new LinkedHashMap<String, Object>();
        paramMap_obd.put("staffId", buildingId);
        String wherePatternStr_obd = "staff_id:staffId";

        int total = getCommonService().commonQueryTotalBySql( sb_total.toString(),paramMap_obd, wherePatternStr_obd);
        pager.setPage(page);
        pager.setRecPerPage(recPerPage);
        pager.setRecTotal(total);
        pageResult.setPager(pager);
        pageResult.setData(data1);
        String jsonStr = JSONObject.fromObject(pageResult).toString();
        return jsonStr;
    }




    @RequestMapping(value = "/client/builDingGponDetail")
    @ResponseBody
    public Object gponDetail(@RequestBody Map<String, Object> data,
                             HttpServletRequest request, HttpServletResponse response){
        String type = (String) data.get("type");
        String code = (String) data.get("code");
        StringBuffer sb = new StringBuffer();

        sb.append("select b.OBD�˿��� as obdPortNumber,b.OBD�˿�ռ���� as obdPortOccupyNumber,b.OBD�˿������� as obdPortUtilizationRate");
        sb.append(", b.ONU�˿��� as onuPortNumber,b.ONU�˿�ռ���� as onuPortOccupyNumber,b.ONU�˿������� as onuPortUtilizationRate");
        sb.append(", b.���ڿ���� as kdBusinessNumber ,b.����IPTV�� as iptvBusinessNumber,b.���������� as voiceBusinessNumber");
        sb.append(", b.DIAҵ���� as diaBusinessNumber , b.�������ҵ���� as swkx,b.˫���ƿ���ҵ���� as scykx from SPC_BUILDING_TJREPORT b");
        sb.append(" where IF_10GPON =  ? and BUILD_CODE = ? ");


        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
        paramMap.put("type", type);
        paramMap.put("code", code);
        String	wherePatternStr = "IF_10GPON:type,BUILD_CODE:code";
        Result dataList = getCommonService().commonQueryObjectBySql(sb.toString(), paramMap, wherePatternStr);
        return dataList;
    }



    /**
     * ��Դ����
     *
     * @param data     ¥��id
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/client/builDingRes")
    @ResponseBody
    public Object builDingRes(@RequestBody Map<String, Object> data,
                              HttpServletRequest request, HttpServletResponse response) throws Exception {
        String type = (String)data.get("type");

        if("onu".equals(type.toLowerCase())){
            return getOnu(data);
        }else if("obd".equals(type.toLowerCase())){
            return getObd(data);
        }
        return null;
    }

    public int queryTotal(Map paramMap,String sqlStr,String wherePatternStr){
        return getCommonService().commonQueryTotalBySql(sqlStr, paramMap,wherePatternStr);
    }


    public Object getObd(Map<String, Object> data) throws Exception{
        String buildNo = (String) data.get("code");
        String search =  (String) data.get("search");
        String type =  (String) data.get("type1");

        Map pageParams = data;
        PageResult pageResult = new PageResult();
        List data1 = null;
        StringBuilder sb_total = new StringBuilder();
        sb_total.append("select  count(*) total FROM SPC_BUILDING  a,                                    \n");
        sb_total.append("        spc_building_eqp_rela r  ,                                                  \n");
        sb_total.append("        rme_eqp               d                                                 \n");
        sb_total.append("  where  a.build_id=r.build_id                                                   \n");
        sb_total.append("   and r.delete_state='0'                                                \n");
        sb_total.append("     and r.eqp_id=d.eqp_id                                                     \n");
        sb_total.append("    and d.delete_state = '0'                                                    \n");
        sb_total.append("     and d.res_type_id = '2530'                                                    \n");
        sb_total.append("     and r.if_10gpon= ?");
        sb_total.append("    and a.build_code= ?   				   	     								 \n");
        if(StringUtils.isNotBlank(search)){
            sb_total.append(" and d.eqp_name like '%"+search+"%'");
        }

        StringBuilder sb = new StringBuilder();
        sb.append("select portInfo,rownm,eqpId,eqpName,portNum,usePortNum,installAddr,standAddr,splitRate FROM     											                   \n");
        sb.append("(select rownum as rownm,d.eqp_id as eqpId,d.eqp_name as eqpName,                \n");
        sb.append("        (SELECT COUNT(DISTINCT p.PORT_ID)                                       \n");
        sb.append("           FROM RME_PORT p                                                      \n");
        sb.append("          WHERE p.DELETE_STATE = '0'                                            \n");
        sb.append("            AND p.SUPER_RES_ID = d.EQP_ID                                       \n");
        sb.append("            AND p.POSITION <> GET_INVAILDPOSITION(d.EQP_ID,                     \n");
        sb.append("                                                  d.RES_TYPE_ID,                \n");
        sb.append("                                                  d.PROTECT_STYLE_ID,           \n");
        sb.append("                                                  d.REGION_ID)) as portNum,     \n");
        sb.append("        (SELECT COUNT(DISTINCT p.PORT_ID)                                       \n");
        sb.append("           FROM RME_PORT p                                                      \n");
        sb.append("          WHERE p.DELETE_STATE = '0'                                            \n");
        sb.append("            AND p.SUPER_RES_ID = d.EQP_ID                                       \n");
        sb.append("            AND SF_GET_TELENO_BY_RES_ID(p.PORT_ID) IS NOT NULL                  \n");
        sb.append("            AND p.POSITION <> GET_INVAILDPOSITION(d.EQP_ID,                     \n");
        sb.append("                                                  d.RES_TYPE_ID,                \n");
        sb.append("                                                  d.PROTECT_STYLE_ID,           \n");
        sb.append("                                                  d.REGION_ID)) as usePortNum,  \n");
        sb.append("                                                                                \n");
        sb.append("        d.ADDRESS as installAddr,                                               \n");
        sb.append("        sf_get_eqp_port_info1(d.eqp_id) as portInfo,                            \n");
        sb.append("        sf_get_stand_name_by_eqp_id(d.eqp_id) as standAddr,                     \n");
        sb.append("        SF_GET_DESC_CHINA(d.WORK_MODE) as splitRate                             \n");
        sb.append("   FROM SPC_BUILDING          a,                                                \n");
        sb.append("         spc_building_eqp_rela r  ,                                               \n");
        sb.append("        rme_eqp               d                                                \n");
        sb.append("  where a.build_id=r.build_id                                                    \n");
        sb.append("     and r.delete_state='0'                                                   \n");
        sb.append("     and d.delete_state = '0'                                                        \n");

        sb.append("    and r.eqp_id=d.eqp_id                                                     \n");
        sb.append("    and d.res_type_id = '2530'                                                  \n");
        sb.append("    and r.if_10gpon= ?");

        if(StringUtils.isNotBlank(search)){
            sb.append(" and d.eqp_name like '%"+search+"%'");
        }
        sb.append("    and a.build_code= ?) t  where rownm>=? and rownm<=? 				   	       \n");

        String sql = sb.toString();
        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();

        Pager pager = new Pager();
        int page = pager.getPage();
        int recPerPage = pager.getRecPerPage();
        if(pageParams.get("page")!=null){
            page = (Integer) pageParams.get("page");
        }
        if(pageParams.get("recPerPage")!=null){
            recPerPage = (Integer)pageParams.get("recPerPage");
        }
        int startIndex =(page-1)*recPerPage+1; //��ʼ�±�
        int endIndex = page*recPerPage; //�����±�

        paramMap.put("if10gpon", type);
        paramMap.put("buildNo", buildNo);
        paramMap.put("startIndex", startIndex);
        paramMap.put("endIndex", endIndex);
        String	wherePatternStr = "if_10gpon:if10gpon,build_code:buildNo,startIndex:startIndex,endIndex:endIndex";
        Result dataList = getCommonService().commonQueryListBySql(sql, paramMap, wherePatternStr);
        data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

        //�ܼ�¼��
        Map<String, Object> paramMap_obd = new LinkedHashMap<String, Object>();
        paramMap_obd.put("if10gpon", type);
        paramMap_obd.put("buildNo", buildNo);
        String wherePatternStr_obd = "if_10gpon:if10gpon,build_code:buildNo";
        int total = queryTotal(paramMap_obd, sb_total.toString(), wherePatternStr_obd);
        pager.setPage(page);
        pager.setRecPerPage(recPerPage);
        pager.setRecTotal(total);
        pageResult.setPager(pager);
        pageResult.setData(data1);

        String jsonStr = JSONObject.fromObject(pageResult).toString();
        return jsonStr;
    }

    public Object getOnu(Map<String, Object> data) throws Exception{
        String buildNo = (String) data.get("code");

        String search = (String) data.get("search");
        Map pageParams = data;  //ǰ̨��ҳ����
        PageResult pageResult = new PageResult();
        List data1 = null;

        StringBuilder sb_total = new StringBuilder();
        sb_total.append("select  count(*) total FROM SPC_BUILDING  a,                              \n");
        sb_total.append("        exc_station_direction b,                                          \n");
        sb_total.append("        spc_exc_eqp_rela      c,                                          \n");
        sb_total.append("        rme_eqp               d                                           \n");
        sb_total.append("  where a.build_name = b.dire_name                                        \n");
        sb_total.append("    and b.delete_state = '0'                                              \n");
        sb_total.append("    and c.delete_state = '0'                                              \n");
        sb_total.append("    and d.delete_state = '0'                                              \n");
        sb_total.append("    and b.dire_id=c.dire_id                                               \n");
        sb_total.append("    and c.eqp_id=d.eqp_id                                                 \n");
        sb_total.append("    and d.res_type_id = '2511'                                            \n");
        sb_total.append("    and a.build_code= ?   				   	     						   \n");
        if(StringUtils.isNotBlank(search)){
            sb_total.append(" and d.eqp_name like '%"+search+"%'");
        }
        StringBuilder sb = new StringBuilder();
        sb.append(" select direction,portInfo,rownm,eqpId,eqpName,portNum,usePortNum,oltCode,ponCode,installAddr,standAddr,manageRange,voipType,resType,factory,ipAddr,voipAddr, macAddr,eqpSeq FROM           												    \n");
        sb.append(" (select rownum as rownm,d.eqp_id as eqpId, d.eqp_name as eqpName,           \n");
        sb.append("        (SELECT COUNT(DISTINCT p.PORT_ID)                                    \n");
        sb.append("           FROM RME_PORT p                                                   \n");
        sb.append("          WHERE p.DELETE_STATE = '0'                                         \n");
        sb.append("            AND p.SUPER_RES_ID = d.EQP_ID                                    \n");
        sb.append("            AND p.POSITION <> GET_INVAILDPOSITION(d.EQP_ID,                  \n");
        sb.append("                                                  d.RES_TYPE_ID,             \n");
        sb.append("                                                  d.PROTECT_STYLE_ID,        \n");
        sb.append("                                                  d.REGION_ID)) as portNum,  \n");
        sb.append("        (SELECT COUNT(DISTINCT p.PORT_ID)                                    \n");
        sb.append("           FROM RME_PORT p                                                   \n");
        sb.append("          WHERE p.DELETE_STATE = '0'                                         \n");
        sb.append("            AND p.SUPER_RES_ID = d.EQP_ID                                    \n");
        sb.append("            AND SF_GET_TELENO_BY_RES_ID(p.PORT_ID) IS NOT NULL               \n");
        sb.append("                                                                             \n");
        sb.append("            AND p.POSITION <> GET_INVAILDPOSITION(d.EQP_ID,                  \n");
        sb.append("                                                 d.RES_TYPE_ID,              \n");
        sb.append("                                                 d.PROTECT_STYLE_ID,         \n");
        sb.append("                                                 d.REGION_ID)) as usePortNum,\n");
        sb.append("        Sf_Get_ONUOBD_Up_OLT_No(d.eqp_id) as oltCode,                        \n");
        sb.append("        Sf_Get_ONUOBD_Up_Pon_No(d.eqp_id) as ponCode,                        \n");
        sb.append("        d.ADDRESS AS installAddr,                                            \n");
        sb.append("        b.dire_name as direction,                                            \n");
        sb.append("        sf_get_eqp_port_info1(d.eqp_id) as portInfo,                         \n");
        sb.append("        sf_get_stand_name_by_eqp_id(d.eqp_id) as standAddr,                  \n");
        sb.append("        d.MANAGE_RANGE as manageRange,                                       \n");
        sb.append("        SF_GET_DESC_CHINA(d.Voip_Type) as voipType,                          \n");
        sb.append("        sf_get_res_type(d.res_type_id) as resType,                           \n");
        sb.append("        (select m.mfr                                                        \n");
        sb.append("           FROM pub_mfr m, pub_mfr_res mr                                    \n");
        sb.append("          where m.delete_state = '0'                                         \n");
        sb.append("            and mr.delete_state = '0'                                        \n");
        sb.append("            and mr.res_id = d.eqp_id                                         \n");
        sb.append("            and mr.mfr_id = m.mfr_id                                         \n");
        sb.append("            and rownum = 1) as factory,                                      \n");
        sb.append("        (select o.ip_address                                                 \n");
        sb.append("           FROM rme_out_eqp o                                                \n");
        sb.append("          where o.delete_state = '0'                                         \n");
        sb.append("            and o.eqp_id = d.eqp_id) as ipAddr,                              \n");
        sb.append("        d.voip_addr as voipAddr,                                             \n");
        sb.append("        d.manage_ipaddress as macAddr,                                       \n");
        sb.append("        d.eqp_sequence as eqpSeq                                             \n");
        sb.append("   FROM SPC_BUILDING          a,                                             \n");
        sb.append("        exc_station_direction b,                                             \n");
        sb.append("        spc_exc_eqp_rela      c,                                             \n");
        sb.append("        rme_eqp               d                                              \n");
        sb.append("  where a.build_name = b.dire_name                                           \n");
        sb.append("    and b.delete_state = '0'                                                 \n");
        sb.append("    and c.delete_state = '0'                                                 \n");
        sb.append("    and d.delete_state = '0'                                                 \n");
        sb.append("    and d.res_type_id = '2511'                                               \n");
        sb.append("     and b.dire_id=c.dire_id                                                 \n");
        sb.append("    and c.eqp_id=d.eqp_id                                                    \n");
        if(StringUtils.isNotBlank(search)){
            sb.append(" and d.eqp_name like '%"+search+"%'");
        }
        sb.append("    and a.build_code= ?) t where rownm>=? and rownm<=?                       \n");
        String sql = sb.toString();
        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();

        Pager pager = new Pager();
        int page = pager.getPage();
        int recPerPage = pager.getRecPerPage();
        if(pageParams.get("page")!=null){
            page = (Integer) pageParams.get("page");
        }
        if(pageParams.get("recPerPage")!=null){
            recPerPage = (Integer)pageParams.get("recPerPage");
        }
        int startIndex =(page-1)*recPerPage+1; //��ʼ�±�
        int endIndex = page*recPerPage; //�����±�

        paramMap.put("buildNo", buildNo);
        paramMap.put("startIndex", startIndex);
        paramMap.put("endIndex", endIndex);
        String	wherePatternStr = "build_code:buildNo,startIndex:startIndex,endIndex:endIndex";
        Result dataList = getCommonService().commonQueryListBySql(sql, paramMap, wherePatternStr);
        data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

        //�ܼ�¼��
        Map<String, Object> paramMap_onu = new LinkedHashMap<String, Object>();
        paramMap_onu.put("buildNo", buildNo);
        String wherePatternStr_onu = "build_code:buildNo";
        int total = queryTotal(paramMap_onu, sb_total.toString(), wherePatternStr_onu);

        pager.setPage(page);
        pager.setRecPerPage(recPerPage);
        pager.setRecTotal(total);
        pageResult.setPager(pager);
        pageResult.setData(data1);

        String jsonStr = JSONObject.fromObject(pageResult).toString();
        return jsonStr;
    }

    /**
     * ҵ������
     *
     * @param data
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/client/builDingBusiness")
    @ResponseBody
    public Object builDingBusiness(@RequestBody Map<String, Object> data,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception {
        String buildNo = (String) data.get("code");
        String type = (String) data.get("type");
        Map pageParams = data;
        PageResult pageResult = new PageResult();
        List data1 = null;
        StringBuilder sb_service = new StringBuilder();
        sb_service.append("select count(*) as total from SPC_BUILDING_BUSINESS where build_code = ? and IF_10GPON = ?");

        Map<String, Object> paramMap_server = new LinkedHashMap<String, Object>();

        StringBuilder sb = new StringBuilder();
        sb.append("select userContact,dk,swzxUpDownRate,ywkdTime,isKd,prodName,buildCode,customName,tel,address,oltIp,oltName,pon,eqpName,rownm,portState,portPos from \n" );
        sb.append("(select build_code as buildCode,custom_name as customName,tele_no as tel,address,olt_ip as oltIp,olt_name as oltName,pon,eqp_name as eqpName,rownum as rownm ,port_pos as portPos,port_state as portState,prod_name as prodName,�Ƿ������� as isKd \n");
        sb.append(" , ����ר������������ as swzxUpDownRate , ���� as dk,�ͻ���ϵ��ʽ as userContact,ҵ��ͨ���� as  ywkdTime \n");
        sb.append("from SPC_BUILDING_BUSINESS where build_code = ? and IF_10GPON = ? ) t where rownm>=? and rownm<=? ");
        String sql = sb.toString();
        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();

        Pager pager = new Pager();
        int page = pager.getPage();
        int recPerPage = pager.getRecPerPage();
        if(pageParams.get("page")!=null){
            page = (Integer) pageParams.get("page");
        }
        if(pageParams.get("recPerPage")!=null){
            recPerPage = (Integer)pageParams.get("recPerPage");
        }
        int startIndex =(page-1)*recPerPage+1; //��ʼ�±�
        int endIndex = page*recPerPage; //�����±�

        paramMap.put("buildNo", buildNo);
        paramMap.put("type", type);
        paramMap.put("startIndex", startIndex);
        paramMap.put("endIndex", endIndex);
        String	wherePatternStr = "build_code:buildNo,IF_10GPON:type,startIndex:startIndex,endIndex:endIndex";
        Result dataList = getCommonService().commonQueryListBySql(sql, paramMap, wherePatternStr);
        data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

        String wherePatternStr_server = "build_code:buildNo,IF_10GPON:type";
        paramMap_server.put("buildNo", buildNo);
        paramMap_server.put("type", type);
        int total = queryTotal(paramMap_server, sb_service.toString(), wherePatternStr_server);

        pager.setPage(page);
        pager.setRecPerPage(recPerPage);
        pager.setRecTotal(total);
        pageResult.setPager(pager);
        pageResult.setData(data1);

        String jsonStr = JSONObject.fromObject(pageResult).toString();
        return jsonStr;
    }



    @RequestMapping(value = "/client/builDingObdDetail")
    @ResponseBody
    public Object builDingObdDetail(@RequestBody Map<String, Object> data,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception {
        String eqp_id = (String) data.get("eqpId");
        Map pageParams = data;
        PageResult pageResult = new PageResult();
        List data1 = null;
        StringBuilder sb_service = new StringBuilder();
        sb_service.append("SELECT count(1) as total FROM v_app_port where 1=1");
        sb_service.append(" and eqp_id = ? ");
        Map<String, Object> paramMap_server = new LinkedHashMap<String, Object>();

        StringBuilder sb = new StringBuilder();
        sb.append("select B.PORT_ID as PORT_ID,B.EQP_ID as EQP_ID,B.PORT_NAME as PORT_NAME,B.STATE_NAME as STATE_NAME,");
        sb.append(" B.OPR_STATE_ID as OPR_STATE_ID,B.TELE_NO as TELE_NO,B.INSTALL_ADDR as INSTALL_ADDR,B.USERNAME as USERNAME ,rownm");
        sb.append(" FROM (SELECT A.*, ROWNUM as rownm FROM (");
        sb.append(" SELECT * FROM v_app_port where 1=1 ");
        sb.append(" and eqp_id = ? ) A ) B where rownm>=? and rownm<=?");

        String sql = sb.toString();
        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();

        Pager pager = new Pager();
        int page = pager.getPage();
        int recPerPage = pager.getRecPerPage();
        if(pageParams.get("page")!=null){
            page = (Integer) pageParams.get("page");
        }
        if(pageParams.get("recPerPage")!=null){
            recPerPage = (Integer)pageParams.get("recPerPage");
        }
        int startIndex =(page-1)*recPerPage+1; //��ʼ�±�
        int endIndex = page*recPerPage; //�����±�

        paramMap.put("eqpId", eqp_id);
        paramMap.put("startIndex", startIndex);
        paramMap.put("endIndex", endIndex);
        String	wherePatternStr = "eqp_id:eqpId,startIndex:startIndex,endIndex:endIndex";
        Result dataList = getCommonService().commonQueryListBySql(sql, paramMap, wherePatternStr);
        data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

        String wherePatternStr_server = "eqp_id:eqpId";
        paramMap_server.put("eqpId", eqp_id);
        int total = queryTotal(paramMap_server, sb_service.toString(), wherePatternStr_server);

        pager.setPage(page);
        pager.setRecPerPage(recPerPage);
        pager.setRecTotal(total);
        pageResult.setPager(pager);
        pageResult.setData(data1);

        String jsonStr = JSONObject.fromObject(pageResult).toString();
        return jsonStr;
    }


    @RequestMapping(value = "/client/building/report")
    @ResponseBody
    public Object builDingBusinessReport(@RequestBody Map<String, Object> data,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception{

        String buildNo = (String) data.get("code");
        String type = (String) data.get("type");
        String sql = "select  sum(case " +
                "                              when b.prod_name = ('DIAҵ��PON') then " +
                "                               1 " +
                "                              else " +
                "                               0 " +
                "                            end) as DIAҵ����, " +
                "                        sum(case " +
                "                              when b.prod_type <> '110001' and b.lan_id is null and " +
                "                                   b.prod_name not in " +
                "                                   ('˫���ƿ���', 'DIAҵ��PON', '�������') then " +
                "                               1 " +
                "                              else " +
                "                               0 " +
                "                            end) as ���ڿ����, " +
                "                        sum(case " +
                "                              when b.lan_id is not null then " +
                "                               1 " +
                "                              else " +
                "                               0 " +
                "                            end) as ����IPTV��, " +
                "                        sum(case " +
                "                              when b.prod_type = '110001' then " +
                "                               1 " +
                "                              else  " +
                "                               0 " +
                "                            end) as ����������" +
                "  ,sum(case " +
                "                              when b.�Ƿ�������= ('��') then " +
                "                               1 " +
                "                              else " +
                "                               0 " +
                "                            end) as ����ר��ҵ���� FROM spc_building_business b where IF_10GPON = ? and build_code = ? ";


        String str1 = " and ҵ��ͨ���� BETWEEN trunc(sysdate,'D')+1  and  trunc(sysdate,'D')+7 ";
        String str2 = " and ҵ��ͨ���� BETWEEN trunc(sysdate,'mm')  and  last_day(sysdate) ";



        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
        paramMap.put("type", type);
        paramMap.put("buildCode", buildNo);
        List data1 = null;
        List data2 = null;
        List list = new ArrayList();
        String	wherePatternStr = "IF_10GPON:type,build_code:buildCode";
        Result dataList = getCommonService().commonQueryObjectBySql(sql+str1, paramMap, wherePatternStr);
        Result dataList1= getCommonService().commonQueryObjectBySql(sql+str2, paramMap, wherePatternStr);

        //data1 = (List)((Map)dataList.getResultData().get("data_info")).get("dataList");

        //data2 = (List)((Map)dataList1.getResultData().get("data_info")).get("dataList");
        list.add(dataList);
        list.add(dataList1);
        System.out.println(list);
        return list;
    }

    /**
     * �û�����
     * @param data
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/client/staffIdRole")
    @ResponseBody
    public Object builDingUser(@RequestBody Map<String, Object> data,
                                   HttpServletRequest request, HttpServletResponse response) throws Exception {
        String buildNo = (String) data.get("code");
        Map<String, Object> paramMap = new LinkedHashMap<String, Object>();
        paramMap.put("staffId", buildNo);
        StringBuilder sb = new StringBuilder();
        sb.append("select priv_gk as gk,priv_bi as bi from MOBILE_STAFF_RIGHT where staff_id=?");
        String sql = sb.toString();
        String	wherePatternStr = "staff_id:staffId";
        Result dataList = getCommonService().commonQueryObjectBySql(sql, paramMap, wherePatternStr);
        return dataList;
    }

    @RequestMapping(value = "/client/orderInfoInit")
    @ResponseBody
    public Object orderInit(@RequestBody String data) throws Exception {
//        JSONObject jsonObject = JSONObject.fromObject(data);
//        final String staffId1 = (String) jsonObject.get("StaffId");
//        Hdf hdf = new Hdf();
//        JdbcTemplate jdbcTemplate = new JdbcTemplate(hdf.getDataSource());
//        String param2Value = (String) jdbcTemplate.execute(
//                new CallableStatementCreator() {
//                    public CallableStatement createCallableStatement(Connection con) throws SQLException {
//                        String storedProc = "{call HNLT_GK.INF_APP_HPAGE_QUERY(?,?)}";// 调用的sql
//                        CallableStatement cs = con.prepareCall(storedProc);
//                        cs.setString(1,staffId1);// 设置输入参数的值
//                        cs.registerOutParameter(2, OracleTypes.VARCHAR);// 注册输出参数的类型
//                        System.out.println(cs);
//                        return cs;
//                    }
//                },new CallableStatementCallback() {
//                    public Object doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException {
//                        cs.execute();
//                        System.out.println(cs.getString(2));
//                        return cs.getString(2);// 获取输出参数的值
//                    }
//
//                });
//        return param2Value;
        JSONObject jsonObject = JSONObject.fromObject(data);
        String staffId1 = (String) jsonObject.get("StaffId");
        MobileDataInstallDAOImpl i = new MobileDataInstallDAOImpl();
        String result = i.queryOrderInfo(staffId1);
        return result;
    }



    @RequestMapping(value = "/client/dacpUserClmfpmtQuery")
    @ResponseBody
    public Object dacpUserClmfpmtQuery(@RequestBody Map<String, Object> data,
    HttpServletRequest request, HttpServletResponse response) throws Exception{
        String msisdn = (String) data.get("msisdn" );
        String orderId = (String) data.get("orderId" );
        String staffId = (String) data.get("staffId" );
        String workId = (String) data.get("workId");
        if(orderId==null||orderId.equals("null")){
            String sql  = "SELECT base_order_id as ORDER_ID FROM wo_work_order where id = ?";
            String where = "id:id";
            Map map = new HashMap();

            map.put("id",workId);
            Result result = getCommonService().commonQueryObjectBySql(sql, map, where);
            Map map1=  (Map)result.getResultData().get("data_info");
            orderId = ((BigDecimal)map1.get("ORDER_ID")).toString();
        }

        RestTemplate rest = new RestTemplate();

        String url = "http://192.168.101.175:11010/yiyiyun/dacp/user/clmfpmt/query?msisdn="+msisdn;

        String list = rest.postForObject(url, null, String.class);

        String sql = "insert into APP_SDCL_LOG(STAFF_ID,ORDER_ID,RESULT,ACCOUNT,ID,DATE_TIME) values(?,?,?,?,APP_SDCL_LOG_SEQ.nextval,sysdate)";
        Map map = new LinkedHashMap();
        map.put("staffId",staffId);
        map.put("orderId",orderId);
        map.put("result",list);
        map.put("account",msisdn);

        Result result = getCommonService().commonInsertObjectBySql(sql, map);


        return list;
    }





}
