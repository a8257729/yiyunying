package com.ztesoft.mobile.v2.controller.speed;

import com.ztesoft.mobile.v2.controller.common.CommonBaseController;
import com.ztesoft.mobile.v2.controller.common.WebConfigController;
import com.ztesoft.mobile.v2.core.Result;
import com.ztesoft.mobile.v2.dao.workform.hunan.HuNanDAO;
import com.ztesoft.mobile.v2.dao.workform.hunan.HuNanDAOImpl;
import com.ztesoft.mobile.v2.service.app.MobileDataInstallService;
import com.ztesoft.mobile.v2.service.app.MobileDataInstallServiceImpl;
import com.ztesoft.mobile.v2.service.resource.ResourceService;
import com.ztesoft.mobile.v2.service.resource.ResourceServiceImpl;
import com.ztesoft.mobile.v2.util.HttpUtil;
import net.sf.json.JSONObject;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;


@Controller
public class SpeedController extends WebConfigController {

    private static final Logger logger = Logger.getLogger(SpeedController.class);
    private MobileDataInstallService dataInstallService = new MobileDataInstallServiceImpl();

    @RequestMapping(value = {"/client/speed/queryBroadband1"})
    @ResponseBody
    public Object queryBroadband(@RequestBody Map<String, Object> data, ModelMap model,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryBroadband");
        String account = (String) data.get("account");
        RestTemplate restTemplate = new RestTemplate();
        String url = "http://192.168.101.15:5090/bdes-oi/thirdPartyAction/userBindNumberInfo.action?dNumber="+account;
        Map param = new HashMap();
        Map resMap = restTemplate.postForObject(url, param, Map.class);
        List<Map<String,Object>> list = (List)resMap.get("data");
        
        if(list!=null){
            if(list.size()>0){
                Map<String, Object> map = list.get(0);
                Set<String> keySet = map.keySet();
                Iterator<String> it = keySet.iterator();
                while(it.hasNext()) {
                    System.out.println("speed"+" "+map.get("speed"));
                    Map<String,String> speed = new HashMap();
                    speed.put("speed", (String) map.get("speed"));
                    logger.info("调用方法：queryBroadband 返回结果:"+speed+",参数:"+account);
                    return speed;
                }
            }
        }
        logger.info("调用方法：queryBroadband 返回结果:"+null+",参数:"+account);
        return null;
    }


    @RequestMapping(value = {"/client/dataInstall/queryDataInstallByOrg"})
    @ResponseBody
    public Object queryDataInstallByOrg(@RequestBody Map<String, Object> data, ModelMap model,
                                 HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        String org_id = data.get("org_id").toString();
        Map<String, Object> result = new HashMap<String, Object>();
        String falg = dataInstallService.queryDataInstallByOrg(org_id);
        result.put("result",falg);
        return result;
    }


    @RequestMapping(value = {"/client/bss/project/queryBSSProject"})
    @ResponseBody
    public Object queryBSSProject(@RequestBody Map<String, Object> data, ModelMap model,
                                        HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        String work_order_id = data.get("work_order_id").toString();
        Map<String, String> result = new HashMap<String, String>();
        result = dataInstallService.queryBSSProject(work_order_id);

        return result;
    }
    @RequestMapping(value = {"/client/query/obd/queryPixianCode"})
    @ResponseBody
    public Object queryPixianCode(@RequestBody Map<String, Object> data, ModelMap model,
                                  HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        Map<String, Object>  param = (Map<String, Object>) data.get("param");
        Map<String, String> result = new HashMap<String, String>();
        result = dataInstallService.queryPixianCode(param.get("workOrderId").toString());

        return result;
    }

    @RequestMapping(value = {"/client/query/project/queryPowerModel"})
    @ResponseBody
    public Object queryPowerModel(@RequestBody Map<String, Object> data, ModelMap model,
                                  HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        String base_order_id = data.get("base_order_id").toString();
        String hgu_sn = data.get("hgu_sn").toString();
        String staffId = data.get("staffId").toString();
        String STAFF_NAME = data.get("STAFF_NAME").toString();
        Map<String, String> result = new HashMap<String, String>();
        result = dataInstallService.queryPowerModel(base_order_id,hgu_sn,staffId,STAFF_NAME);

        return result;
    }

    @RequestMapping(value = {"/client/query/project/queryPowerModel1"})
    @ResponseBody
    public Object queryPowerModel1(@RequestBody Map<String, Object> data, ModelMap model,
                                  HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        String order_id = data.get("order_id").toString();
        String hgu_sn = data.get("hgu_sn").toString();
        String staffId = data.get("staffId").toString();
        String STAFF_NAME = data.get("STAFF_NAME").toString();
        Map<String, String> result = new HashMap<String, String>();
        result = dataInstallService.queryPowerModel1(order_id,hgu_sn,staffId,STAFF_NAME);
        System.out.println("result=-=-=-======================================================>>>>>>"+result);
        return result;
    }

    @RequestMapping(value = {"/client/query/obd/queryOBDInfo"})
    @ResponseBody
    public Result queryOBDInfo(@RequestBody Map<String, Object> data, ModelMap model,
                                  HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        String qrCode = data.get("qrCode").toString();
        String workOrderId = data.get("workOrderId").toString();

        Result result = dataInstallService.queryOBDInfo(qrCode,workOrderId);

        return result;
    }

    @RequestMapping(value = {"/client/execute/dataInstall/processDataInstall"})
    @ResponseBody
    public Result processDataInstall(@RequestBody Map<String, Object> data, ModelMap model,
                               HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：processDataInstall");


        Result result = dataInstallService.processDataInstall(data);

        return result;
    }

    @RequestMapping(value = {"/client/execute/dataInstall/processDataInstall1"})
    @ResponseBody
    public Result processDataInstall1(@RequestBody Map<String, Object> data, ModelMap model,
                               HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：processDataInstall1");

        Result result = dataInstallService.processDataInstall1(data);
        return result;
    }


    @RequestMapping(value = {"/client/dataInstall/query/querymakeProcessData"})
    @ResponseBody
    public Object querymakeProcessData(@RequestBody Map<String, Object> data, ModelMap model,
                                       HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryDataInstallByOrg");
        String wk_order_id = data.get("wk_order_id").toString();
        Map<String, String> result = new HashMap<String, String>();
        result = dataInstallService.querymakeProcessData(wk_order_id);

        return result;
    }

    @RequestMapping(value = {"/client/zwt/query/speedInfo"})
    @ResponseBody
    public Object queryZWTSpeedInfo(@RequestBody Map<String, Object> data, ModelMap model,
                                       HttpServletRequest request, HttpServletResponse response) throws Exception{
        logger.info("调用方法：queryZWTSpeedInfo");
        Map<String, Object> param = (Map<String, Object>) data.get("param");
       String accNbr = "";
        String kdaccountAc = param.get("kdaccountAc").toString();
        String requestOrderId = param.get("orderId").toString();
        if("".equals(kdaccountAc))
        {
            Map<String,String> resultMap =  dataInstallService.queryOrderTypeById(requestOrderId);
            accNbr = resultMap.get("accNbrCode");
        }
        else
        {
            accNbr=kdaccountAc;
        }

       List<Map>  resultList = new ArrayList<Map>();
        Map<String, Object>  orderMap = dataInstallService.queryZWTSpeedInfo(accNbr);
        String orderId = orderMap.get("orderId").toString();
        resultList = dataInstallService.querySpotSpeedInfo(orderId);
        return resultList;
    }



    /**
     * 微信公众号用户信息查询
     */
    @RequestMapping(value = { "/client/yh/click/count" })
    public @ResponseBody void addClickYHCount(@RequestParam String callBack, HttpServletRequest request, HttpServletResponse response) {
        if (logger.isDebugEnabled()) {
            logger.info(" Call queryUserHouseInfoByCode method ");
        }
        try{
            logger.info(" Call queryUserHouseInfoByCode method ");
            String qrcode = request.getParameter("qrcode");
           String type = request.getParameter("type");
            Result result = dataInstallService.addClickYHCount(qrcode,type);
            JSONObject jsonResult = JSONObject.fromObject(result);
            response.getWriter().print(callBack+"("+jsonResult.toString()+")");
            response.flushBuffer();
        }catch(Exception e)
        {
            e.printStackTrace();
        }

    }



    @ResponseBody
    @RequestMapping(value = "/client/zwt/query/speed", method = RequestMethod.POST,produces = "application/text;charset=UTF-8")
    public String queryZWTSpeed(@RequestBody String jsonParam) {
        // 	小区基本信息查询
        logger.info("zwt query speed param:"+jsonParam);
        JSONObject js =  JSONObject.fromObject(jsonParam);
       String orderId = js.getString("orderId");
        String staffId = js.getString("staffId");
        String kdaccountAc = js.getString("kdaccountAc");
        String accNbr = js.getString("userBroadcast");
        Map<String,String> resultMap =  dataInstallService.queryOrderTypeById(orderId);
        String phone =  dataInstallService.queryStaffTel(staffId);
        js.put("orderScene",resultMap.get("orderType"));
        js.put("cityCode",resultMap.get("cityCode"));
        js.put("districtCode",resultMap.get("districtCode"));
        js.put("phone",phone);
        //组网是没有宽带账号的所以为空
        if("".equals(kdaccountAc))
        {
            String userBroadcast = resultMap.get("accNbrCode");
            js.put("userBroadcast",userBroadcast);
        }
        else
        {
            js.put("userBroadcast",kdaccountAc);
        }
        // 将获取的json数据封装一层，然后在给返回

System.out.println("json param :"+js.toString());
        String result =  HttpUtil.sendPostBoc("http://192.168.101.175:11231/orders/powerSharing", js.toString());
        System.out.println("queryZWTSpeed result :"+result);
        JSONObject retJson =  JSONObject.fromObject(result);
        JSONObject bss_body = retJson.getJSONObject("UNI_BSS_BODY");
        JSONObject rspJson = bss_body.getJSONObject("VALET_PLACE_ORDER_INFORMATION_RSP");
        String message = rspJson.getString("message");
        System.out.println("queryZWTSpeed message :"+message);
        return message;
    }
}
